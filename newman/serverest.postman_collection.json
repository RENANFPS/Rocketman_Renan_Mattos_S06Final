{
	"info": {
		"_postman_id": "10db8065-5276-46dd-b2ec-b0d2d2052ff7",
		"name": "serverest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20955245"
	},
	"item": [
		{
			"name": "Endpoints/ Testes Regressivos",
			"item": [
				{
					"name": "efetuar login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"      pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , 'authorization']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n \r\n \"email\": \"fulano@qa.com\",\r\n  \"password\": \"teste\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "listar usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['quantidade' , 'usuarios']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/usuarios",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "buscar usuario por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"nome\",\"email\" ,\"_id\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['nome' , '_id', 'email','password','administrador']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios",
								"0uxuPY0cbmQhpEz1"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									"//busca o usuario criado\r",
									"pm.test(\"busca o usuario que acabou de cadastrar\", function (){\r",
									"const response = pm.response.json();\r",
									"pm.environment.set('id', response._id);\r",
									"})\r",
									"\r",
									"let url = pm.environment.get('baseURL');\r",
									"let id = pm.environment.get('id');\r",
									"\r",
									"const  getUser = {\r",
									"    url: `${url}/usuarios/${id}` ,   //variavel\r",
									"    method: 'GET',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    }\r",
									" }\r",
									"\r",
									"pm.sendRequest(getUser,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"teste\",\r\n  \"email\": \"teste@teste.com\",\r\n  \"password\": \"12345\",\r\n  \"administrador\": \"true\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"nome\": \"beltranosSST da Silva\",\r\n            \"email\": \"beltrano@qa.com.br\",\r\n            \"password\": \"teste\",\r\n            \"administrador\": \"true\"\r\n            \r\n        }  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios/CuTBasU1iqaPtpxd",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios",
								"CuTBasU1iqaPtpxd"
							]
						}
					},
					"response": []
				},
				{
					"name": "deletando usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/usuarios/FerxYnLuJ9tvYWVN",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios",
								"FerxYnLuJ9tvYWVN"
							]
						}
					},
					"response": []
				},
				{
					"name": "listar produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('nome' , 'preco' , 'descricao' , '_id');\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['quantidade' , 'produtos' ]\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/produtos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "buscar produto por ip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('nome' , 'preco' , 'descricao' , '_id');\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['quantidade' , 'nome' , 'preco' , 'descricao' , '_id' ]\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/produtos/BeeJh5lz3k6kSIzA",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos",
								"BeeJh5lz3k6kSIzA"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//logando com usuario \r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"\r",
									"\r",
									"const  logComum = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\":\"fulano@qa.com\",\r",
									"            \"password\":\"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(logComum,  (err, response) => {\r",
									"    console.log(err ? err : response.json())\r",
									"    try{\r",
									"\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
									"    } catch {\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									"//busca o produto criado\r",
									"pm.test(\"busca o produto que acabou de cadastrar\", function (){\r",
									"const response = pm.response.json();\r",
									"pm.environment.set('idP', response._id);\r",
									"})\r",
									"\r",
									"let url = pm.environment.get('baseURL');\r",
									"let idP = pm.environment.get('idP');\r",
									"\r",
									"const  getUser = {\r",
									"    url: `${url}/produtos/${idP}` ,   //variavel\r",
									"    method: 'GET',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    }\r",
									" }\r",
									"\r",
									"pm.sendRequest(getUser,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 5000,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/produtos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//logando com usuario \r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const  logComum = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\":\"fulano@qa.com\",\r",
									"            \"password\":\"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(logComum,  (err, response) => {\r",
									"    console.log(err ? err : response.json())\r",
									"    try{\r",
									"\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
									"    } catch {\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' ]\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"nome\": \"Unbranded Fresh Keyboard\",\r\n            \"preco\": 25 , \r\n            \"descricao\": \"Steel\",\r\n            \"quantidade\": 6\r\n            \r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/produtos/6OnahBgmAiaJ6Apj",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos",
								"6OnahBgmAiaJ6Apj"
							]
						}
					},
					"response": []
				},
				{
					"name": "excluir produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//logando com usuario \r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const  logComum = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\":\"fulano@qa.com\",\r",
									"            \"password\":\"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(logComum,  (err, response) => {\r",
									"    console.log(err ? err : response.json())\r",
									"    try{\r",
									"\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
									"    } catch {\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/produtos/35QtrOdSN0YGANJy",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos",
								"35QtrOdSN0YGANJy"
							]
						}
					},
					"response": []
				},
				{
					"name": "listar carrinhos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['quantidade' , 'carrinhos']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carrinhos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"teste@carrinho.com\",\r",
									"            \"password\": \"12345\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carrinhos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "buscar carrinho pelo id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"idProduto\",\"quantidade\" , \"precoUnitario\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['produtos']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carrinhos/qbMqntef4iTOwWfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos",
								"qbMqntef4iTOwWfg"
							]
						}
					},
					"response": []
				},
				{
					"name": "excluir carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//logando com usuario \r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const  logComum = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\":\"fulano@qa.com\",\r",
									"            \"password\":\"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(logComum,  (err, response) => {\r",
									"    console.log(err ? err : response.json())\r",
									"    try{\r",
									"\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
									"    } catch {\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Não foi encontrado carrinho para esse usuário\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carrinhos/concluir-compra",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "cancelar compra",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//logando com usuario \r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const  logComum = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\":\"fulano@qa.com\",\r",
									"            \"password\":\"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(logComum,  (err, response) => {\r",
									"    console.log(err ? err : response.json())\r",
									"    try{\r",
									"\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
									"    } catch {\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Não foi encontrado carrinho para esse usuário\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carrinhos/cancelar-compra",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/login",
			"item": [
				{
					"name": "testes positivos",
					"item": [
						{
							"name": "login comum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const atributos = [\"message\" , \"authorization\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"email\": \"usuario@comum.com.br\",\r\n            \"password\": \"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login adm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , 'authorization']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"fulano@qa.com\",\r\n            \"password\": \"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Casos de teste",
					"item": [
						{
							"name": "CT01 email vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['email']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"email\": \"\",\r\n            \"password\": \"Teste@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT02 senha vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"lila@schoen.net\",\r\n            \"password\": \" \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT03 email sem arroba",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['email']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"email\": \"Testando.testando.com.br\",\r\n            \"password\": \"Teste@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/usuario",
			"item": [
				{
					"name": "usuario comum",
					"item": [
						{
							"name": "cadastrar UC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "UC editando outro usuario //falha de seguranca",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful PUT request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//logando com usuario comum\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"usuario@comum.com.br\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokencomum}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"beltranos da Silva\",\r\n            \"email\": \"beltrano@qa.com.br\",\r\n            \"password\": \"{{$randomPassword}}\",\r\n            \"administrador\": \"true\"\r\n            \r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/CuTBasU1iqaPtpxd",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"CuTBasU1iqaPtpxd"
									]
								}
							},
							"response": []
						},
						{
							"name": "UC lista usuarios  //falha de seguranca",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"quantidade\",\"usuarios\",\"nome\");",
											"});",
											"",
											"//  Validacao de header",
											"pm.test(\"Content-Type is present is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
											"});",
											"",
											"pm.test(\"x-dns-prefetch-control is present\", function () {",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");",
											"});",
											"",
											"pm.test(\"x-frame-options is present\", function () {",
											"    pm.response.to.have.header(\"x-frame-options\");",
											"});",
											"",
											"pm.test(\"strict-transport-security is present\", function () {",
											"    pm.response.to.have.header(\"strict-transport-security\");",
											"});",
											"",
											"pm.test(\"x-download-options is present\", function () {",
											"    pm.response.to.have.header(\"x-download-options\");",
											"});",
											"",
											"pm.test(\"x-content-type-options is present\", function () {",
											"    pm.response.to.have.header(\"x-content-type-options\");",
											"});",
											"",
											"pm.test(\"x-xss-protection is present\", function () {",
											"    pm.response.to.have.header(\"x-xss-protection\");",
											"});",
											"",
											"pm.test(\"x-moesif-transaction-id is present\", function () {",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");",
											"});",
											"",
											"pm.test(\"Content-Length is present\", function () {",
											"    pm.response.to.have.header(\"Content-Length\");",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											"",
											"pm.test(\"Connection is present\", function () {",
											"    pm.response.to.have.header(\"Connection\");",
											"});",
											"",
											"pm.test(\"Keep-Alive is present\", function () {",
											"    pm.response.to.have.header(\"Keep-Alive\");",
											"});",
											"",
											"",
											"//atribuindo valor a variavel",
											"",
											"",
											"pm.test(\"quantidade de usuarios\", function (){",
											"",
											"const response = pm.response.json();",
											"",
											"pm.environment.set('quantUser', response.quantidade);",
											"console.log(response.quantidade)",
											"})",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//logando com usuario comum\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"usuario@comum.com.br\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											")"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "UC lista carrinhos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"quantidade\",\"usuarios\",\"nome\");",
											"});",
											"",
											"//  Validacao de header",
											"pm.test(\"Content-Type is present is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
											"});",
											"",
											"pm.test(\"x-dns-prefetch-control is present\", function () {",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");",
											"});",
											"",
											"pm.test(\"x-frame-options is present\", function () {",
											"    pm.response.to.have.header(\"x-frame-options\");",
											"});",
											"",
											"pm.test(\"strict-transport-security is present\", function () {",
											"    pm.response.to.have.header(\"strict-transport-security\");",
											"});",
											"",
											"pm.test(\"x-download-options is present\", function () {",
											"    pm.response.to.have.header(\"x-download-options\");",
											"});",
											"",
											"pm.test(\"x-content-type-options is present\", function () {",
											"    pm.response.to.have.header(\"x-content-type-options\");",
											"});",
											"",
											"pm.test(\"x-xss-protection is present\", function () {",
											"    pm.response.to.have.header(\"x-xss-protection\");",
											"});",
											"",
											"pm.test(\"x-moesif-transaction-id is present\", function () {",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");",
											"});",
											"",
											"pm.test(\"Content-Length is present\", function () {",
											"    pm.response.to.have.header(\"Content-Length\");",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											"",
											"pm.test(\"Connection is present\", function () {",
											"    pm.response.to.have.header(\"Connection\");",
											"});",
											"",
											"pm.test(\"Keep-Alive is present\", function () {",
											"    pm.response.to.have.header(\"Keep-Alive\");",
											"});",
											"",
											"",
											"//atribuindo valor a variavel",
											"",
											"",
											"pm.test(\"quantidade de usuarios\", function (){",
											"",
											"const response = pm.response.json();",
											"",
											"pm.environment.set('quantUser', response.quantidade);",
											"console.log(response.quantidade)",
											"})",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//logando com usuario comum\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"usuario@comum.com.br\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											")"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "UC deletar usuario adm //falha seguranca",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"let id = pm.environment.get('id')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/usuarios` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({            \r",
											"    \"nome\": \"Usuario teste\",\r",
											"    \"email\": \"usuario@teste.com.br\",\r",
											"    \"password\": \"teste\",\r",
											"    \"administrador\": \"true\"\r",
											"\r",
											"     })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test('Pegando id do user criado', function(){\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try { pm.environment.set(\"id\", response.json()._id)\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"})\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UC deletar usuario comum //falha seguranca",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"let id = pm.environment.get('id')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/usuarios` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({            \r",
											"    \"nome\": \"Usuario teste\",\r",
											"    \"email\": \"usuario@teste.com.br\",\r",
											"    \"password\": \"teste\",\r",
											"    \"administrador\": \"false\"\r",
											"\r",
											"     })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test('Pegando id do user criado', function(){\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try { pm.environment.set(\"id\", response.json()._id)\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"})\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "usuario adm",
					"item": [
						{
							"name": "cadastrar UA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , 'authorization']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"fulano@qa.com\",\r\n            \"password\": \"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "editar usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(\"Successful PUT request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//logando com usuario adm\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\"\r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"beltrano@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/CuTBasU1iqaPtpxd",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"CuTBasU1iqaPtpxd"
									]
								}
							},
							"response": []
						},
						{
							"name": "listar usuarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"true\");",
											"});",
											"",
											"//validacao de atributos (presenca)",
											"const atributos = ['quantidade' , 'usuarios']",
											"",
											"atributos.forEach((atributo) => {",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {",
											"        pm.expect (pm.response.json() [atributo]).to.exist",
											"    })",
											"})",
											"",
											"",
											"//  Validacao de header",
											"pm.test(\"Content-Type is present is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
											"});",
											"",
											"pm.test(\"x-dns-prefetch-control is present\", function () {",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");",
											"});",
											"",
											"pm.test(\"x-frame-options is present\", function () {",
											"    pm.response.to.have.header(\"x-frame-options\");",
											"});",
											"",
											"pm.test(\"strict-transport-security is present\", function () {",
											"    pm.response.to.have.header(\"strict-transport-security\");",
											"});",
											"",
											"pm.test(\"x-download-options is present\", function () {",
											"    pm.response.to.have.header(\"x-download-options\");",
											"});",
											"",
											"pm.test(\"x-content-type-options is present\", function () {",
											"    pm.response.to.have.header(\"x-content-type-options\");",
											"});",
											"",
											"pm.test(\"x-xss-protection is present\", function () {",
											"    pm.response.to.have.header(\"x-xss-protection\");",
											"});",
											"",
											"pm.test(\"x-moesif-transaction-id is present\", function () {",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");",
											"});",
											"",
											"pm.test(\"Content-Length is present\", function () {",
											"    pm.response.to.have.header(\"Content-Length\");",
											"});",
											"",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											"",
											"pm.test(\"Connection is present\", function () {",
											"    pm.response.to.have.header(\"Connection\");",
											"});",
											"",
											"pm.test(\"Keep-Alive is present\", function () {",
											"    pm.response.to.have.header(\"Keep-Alive\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//logando com usuario adm\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\"\r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletar UA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"let id = pm.environment.get('id')\r",
											"\r",
											"//login comum\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"usuario@comum.com.br\",\r",
											"            \"password\": \"teste\"\r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// criando usuario\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/usuarios` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({            \r",
											"    \"nome\": \"Usuario teste\",\r",
											"    \"email\": \"usuario@teste.com.br\",\r",
											"    \"password\": \"teste\",\r",
											"    \"administrador\": \"true\"\r",
											"\r",
											"     })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test('Pegando id do user criado', function(){\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try { pm.environment.set(\"id\", response.json()._id)\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"})\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//busca o usuario criado\r",
											"pm.test(\"busca o usuario que acabou de deletar\", function (){\r",
											"const response = pm.response.json();\r",
											"\r",
											"})\r",
											"\r",
											"let url = pm.environment.get('baseURL');\r",
											"let id = pm.environment.get('id');\r",
											"\r",
											"const  getUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'GET',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(getUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletar UC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"let id = pm.environment.get('id')\r",
											"\r",
											"//login comum\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"usuario@comum.com.br\",\r",
											"            \"password\": \"teste\"\r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// criando usuario\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/usuarios` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({            \r",
											"    \"nome\": \"Usuario teste\",\r",
											"    \"email\": \"usuario@teste.com.br\",\r",
											"    \"password\": \"teste\",\r",
											"    \"administrador\": \"false\"\r",
											"\r",
											"     })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test('Pegando id do user criado', function(){\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try { pm.environment.set(\"id\", response.json()._id)\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"})\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//busca o usuario criado\r",
											"pm.test(\"busca o usuario que acabou de deletar\", function (){\r",
											"const response = pm.response.json();\r",
											"\r",
											"})\r",
											"\r",
											"let url = pm.environment.get('baseURL');\r",
											"let id = pm.environment.get('id');\r",
											"\r",
											"const  getUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'GET',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(getUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "buscar usuario",
					"item": [
						{
							"name": "buscar usuario por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome\",\"email\" ,\"_id\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['nome' , '_id', 'email','password','administrador']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"0uxuPY0cbmQhpEz1"
									]
								}
							},
							"response": []
						},
						{
							"name": "buscar usuario por id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Usuário não encontrado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"0uxuPY0cbmQhpEz2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cadastro com email ja usado",
					"item": [
						{
							"name": "email ja esta sendo usado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"Fulano da Silva\",\r\n            \"email\": \"fulano@qa.com\",\r\n            \"password\": \"teste\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "deletar  usuario inexistente",
					"item": [
						{
							"name": "Deletar usuario inexistente pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios/RUn7rvwp45QhXFQ7",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"RUn7rvwp45QhXFQ7"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "deletar usuario com carrinho cadastrado",
					"item": [
						{
							"name": "deletar usuario com carrinho //WORKING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é permitido excluir usuário com carrinho cadastrado\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , 'idCarrinho']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/yCEm7vQEsDhjxPXP",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"yCEm7vQEsDhjxPXP"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Casos de teste",
					"item": [
						{
							"name": "CT04 cadastrar usuario sem email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT05 cadastrar usuario com senha em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"Ful@n*\",\r\n            \"email\": \"uuu@uol.com\",\r\n            \"password\": \"\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT06 cadastrar usuario  com \"espaco\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message','_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"adolfo\",\r\n            \"email\": \"oi_oi@uol.com\",\r\n            \"password\": \" \",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT07 cadastrar usuario  com ' * ' na senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"adolfo\",\r\n            \"email\": \"oi_oi@uol.com\",\r\n            \"password\": \"*\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT08 cadastrar usuario  com '_' na senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"adolfo\",\r\n            \"email\": \"oi_oi@uol.com\",\r\n            \"password\": \"_\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT09 cadastrar usuario  com '_' no nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"_\",\r\n            \"email\": \"oi_oi@uol.com\",\r\n            \"password\": \"*****\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT10 cadastrar usuario  nome em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"\",\r\n            \"email\": \"oi_oi@uol.com\",\r\n            \"password\": \"*****\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT11 cadastrar usuario  com '_' no email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"Ful@n*\",\r\n            \"email\": \"oi_oi@uol.com\",\r\n            \"password\": \"*****\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT12 cadastrar usuario  email provedor com caracter especial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											"\r",
											"//Excluindo o usuario criado\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('id');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/usuarios/${id}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }            \r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"Ful@n*\",\r\n            \"email\": \"***@###.com\",\r\n            \"password\": \"*****\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT13 editar para email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"Ful@n*\",\r\n            \"email\": \"%$@####.com\",\r\n            \"password\": \"teste\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/otVWZI2TwixkT4Yx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"otVWZI2TwixkT4Yx"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/produtos",
			"item": [
				{
					"name": "cadastro produto repetido",
					"item": [
						{
							"name": "produto repetido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n             \"nome\": \"Logitech MX Vertical\",\r\n            \"preco\": 470,\r\n            \"descricao\": \"Mouse\",\r\n            \"quantidade\": 382\r\n            \r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Token ausente",
					"item": [
						{
							"name": "token ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"FAIL POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"\r",
											"\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"Licensed Steel Towels\",\r\n            \"preco\": 470,\r\n            \"descricao\": \"Concrete\",\r\n            \"quantidade\": 7\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "usario comum editando",
					"item": [
						{
							"name": "usuario comum editando produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//logando com usuario comum\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"usuario@comum.com.br\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"tokencomum\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' ]\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokencomum}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n            \"nome\": \"Licensed Steel Towels\",\r\n            \"preco\": 470,\r\n            \"descricao\": \"Concrete\",\r\n            \"quantidade\": 200\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/0cLci3Se0jxoG2aw",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"0cLci3Se0jxoG2aw"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Casos de teste",
					"item": [
						{
							"name": "CT14 deletar produto que ja foi deletado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful DELETE request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"/*pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})*/\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/P98yJ62eWgIIHlL6",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"P98yJ62eWgIIHlL6"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT15 cadastrar produto com centavos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"produto\",\r\n  \"preco\": 0.50,\r\n  \"descricao\": \"especifico\",\r\n  \"quantidade\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT16 cadastrar produto com  preco acima de 16 digitos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"produto\",\r\n  \"preco\": 12500000000000000,\r\n  \"descricao\": \"especifico\",\r\n  \"quantidade\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT17 cadastrar produto com string na quantidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['quantidade']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"produto\",\r\n  \"preco\": 125,\r\n  \"descricao\": \"especifico\",\r\n  \"quantidade\": \"quatro\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT18 cadastrar produto com quantidade em decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um inteiro\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['quantidade']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"produto\",\r\n  \"preco\": 125,\r\n  \"descricao\": \"especifico\",\r\n  \"quantidade\": 12.5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT19 cadastrar produto com preco 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"produto\",\r\n  \"preco\": 0,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT20 cadastrar produto com string no preco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"produto\",\r\n  \"preco\": \"muito caro\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT21 cadastrar produto com '_' no nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"_\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT22 cadastrar produto sem nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['nome']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": 125,\r\n  \"descricao\": \"especifico\",\r\n  \"quantidade\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT23 cadastrar produto sem numero na quantidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['quantidade']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"produto\",\r\n  \"preco\": 125,\r\n  \"descricao\": \"especifico\",\r\n  \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT24 cadastrar produto sem descricao",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['descricao']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"produto\",\r\n  \"preco\": 125,\r\n  \"descricao\": \"\",\r\n  \"quantidade\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT25 cadastrar produto sem preco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//logando com usuario \r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"\r",
											"\r",
											"const  logComum = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\":\"fulano@qa.com\",\r",
											"            \"password\":\"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(logComum,  (err, response) => {\r",
											"    console.log(err ? err : response.json())\r",
											"    try{\r",
											"\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"// excluir produto criado\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idP', response._id);\r",
											"})\r",
											"\r",
											"\r",
											"const idP = pm.environment.get('idP');\r",
											"const token = pm.environment.get(\"token\");\r",
											"\r",
											"const  delUser = {\r",
											"    url: `${url}/produtos/${idP}` ,   //variavel\r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json' , \r",
											"        'Authorization' : `Bearer ${token}`\r",
											"    }   \r",
											"}\r",
											"    \r",
											" \r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"  \r",
											"  \r",
											"})\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"produto\",\r\n  \"preco\": \"\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "/carrinhos",
			"item": [
				{
					"name": "cadastrar carrinho 2",
					"item": [
						{
							"name": "cadastrar carrinho 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "carrinho com produto duplicado",
					"item": [
						{
							"name": "produto duplicado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é permitido possuir produto duplicado\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , 'idProdutosDuplicados']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Produto nao encontrado",
					"item": [
						{
							"name": "produto nao encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , 'item']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BI\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Produto sem estoque",
					"item": [
						{
							"name": "produto sem estoque",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Produto não possui quantidade suficiente\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message' , 'item']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"F3sOiJGmgeEZYzq0\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cadastro de carrinho sem token",
					"item": [
						{
							"name": "produto sem estoque Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"fulano@qa.com\",\r",
											"            \"password\": \"teste\" \r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"F3sOiJGmgeEZYzq0\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "carrinho nao encontrado",
					"item": [
						{
							"name": "buscar carrinho por id Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Carrinho não encontrado\");\r",
											"});\r",
											"\r",
											"//validacao de atributos (presenca)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
											"        pm.expect (pm.response.json() [atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/qbMqntef4iTOwWfg5",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"qbMqntef4iTOwWfg5"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "excluir carrinho sem token",
					"item": [
						{
							"name": "deletar carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"           \"email\": \"teste@carrinho.com\",\r",
											"            \"password\": \"12345\"\r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/cancelar-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "completar compra",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const  postrequest = {\r",
											"    url: `${url}/login` ,   //variavel\r",
											"    method: 'POST',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"           \"email\": \"teste@carrinho.com\",\r",
											"            \"password\": \"12345\"\r",
											"            })\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest(postrequest,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        //operacao\r",
											"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
											"    } catch {\r",
											"        //operacao\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"//  Validacao de header\r",
											"pm.test(\"Content-Type is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security is present\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options is present\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection is present\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date is present\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection is present\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive is present\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/concluir-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "fluxo produto",
			"item": [
				{
					"name": "listar produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('nome' , 'preco' , 'descricao' , '_id');\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['quantidade' , 'produtos' ]\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/produtos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"//logando com usuario \r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"\r",
									"\r",
									"const  logComum = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\":\"fulano@qa.com\",\r",
									"            \"password\":\"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(logComum,  (err, response) => {\r",
									"    console.log(err ? err : response.json())\r",
									"    try{\r",
									"\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
									"    } catch {\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"// excluir produto criado\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Excluir produto\", function (){\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set('idP', response._id);\r",
									"})\r",
									"\r",
									"\r",
									"const idP = pm.environment.get('idP');\r",
									"const token = pm.environment.get(\"token\");\r",
									"\r",
									"const  delUser = {\r",
									"    url: `${url}/produtos/${idP}` ,   //variavel\r",
									"    method: 'DELETE',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json' , \r",
									"        'Authorization' : `Bearer ${token}`\r",
									"    }   \r",
									"}\r",
									"    \r",
									" \r",
									"\r",
									"pm.sendRequest(delUser,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"  \r",
									"  \r",
									"})\r",
									"\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"fulano@qa.com\",\r",
									"            \"password\": \"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/produtos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "buscar produto por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['nome' , '_id', 'preco','descricao','quantidade']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/produtos/BeeJh5lz3k6kSIzA",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos",
								"BeeJh5lz3k6kSIzA"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\":\"fulano@qa.com\",\r",
									"            \"password\":\"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"        \r",
									"        \r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"nome\" : \"{{$randomProductName}}\",\r\n            \"preco\": 800,\r\n            \"descricao\": \"testando edicao\",\r\n            \"quantidade\": 7\r\n            }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/produtos/vmMdsbV6xPxXvaYz",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos",
								"vmMdsbV6xPxXvaYz"
							]
						}
					},
					"response": []
				},
				{
					"name": "excluir produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\":\"fulano@qa.com\",\r",
									"            \"password\":\"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"        \r",
									"        \r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"})\r",
									"\r",
									"let token = 'Bearer ' + pm.environment.get('token')\r",
									"console.log(pm.environment.get('token'))\r",
									"\r",
									"const  delProd = {\r",
									"    url: `${url}/produtos` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json',\r",
									"        'Authorization' : `${token}`\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": \"produto teste\",\r",
									"            \"preco\": 470,\r",
									"            \"descricao\": \"testando\",\r",
									"            \"quantidade\": 7\r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"let idp = pm.environment.get(\"idP\");\r",
									"\r",
									"pm.sendRequest( delProd, function (err, response) {\r",
									"    console.log(response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"idP\", response.json()._id)\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/produtos/{{idP}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos",
								"{{idP}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "fluxo carrinho",
			"item": [
				{
					"name": "listar carrinhos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['quantidade' , 'carrinhos']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carrinhos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"teste@carrinho.com\",\r",
									"            \"password\": \"12345\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carrinhos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "buscar carrinho por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['produtos']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carrinhos/qbMqntef4iTOwWfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos",
								"qbMqntef4iTOwWfg"
							]
						}
					},
					"response": []
				},
				{
					"name": "cancelar compra",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"           \"email\": \"teste@carrinho.com\",\r",
									"            \"password\": \"12345\"\r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso. Estoque dos produtos reabastecido\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carrinhos/cancelar-compra",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar carrinho 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"teste@carrinho.com\",\r",
									"            \"password\": \"12345\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carrinhos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "concluir compra",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"           \"email\": \"teste@carrinho.com\",\r",
									"            \"password\": \"12345\"\r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carrinhos/concluir-compra",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fluxo de compra",
			"item": [
				{
					"name": "cadastrar usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Excluindo o usuario criado\r",
									"\r",
									"pm.test(\"Excluir usuario\", function (){\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set('id', response._id);\r",
									"})\r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"\r",
									"const  delUser = {\r",
									"    url: `${url}/usuarios/${id}` ,   //variavel\r",
									"    method: 'DELETE',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    }            \r",
									" }\r",
									"\r",
									"pm.sendRequest(delUser,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"  \r",
									"  \r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "fazer login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , 'authorization']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"fulano@qa.com\",\r\n   \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "listar produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['quantidade' , 'produtos']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/produtos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"fulano@qa.com\",\r",
									"            \"password\": \"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carrinhos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "concluir carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"fulano@qa.com\",\r",
									"            \"password\": \"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso. Estoque dos produtos reabastecido\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//logando com usuario \r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"\r",
									"\r",
									"const  logComum = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\":\"fulano@qa.com\",\r",
									"            \"password\":\"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.sendRequest(logComum,  (err, response) => {\r",
									"    console.log(err ? err : response.json())\r",
									"    try{\r",
									"\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7));\r",
									"    } catch {\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"// Buscar se ainda existe carrinho atrelado ao login\r",
									"\r",
									"\r",
									"\r",
									"/*pm.test(\"Buscar carrinho\", function (){\r",
									"\r",
									"\r",
									"\r",
									"const token = pm.environment.get(\"token\");\r",
									"\r",
									"const  buscarCar = {\r",
									"    url: `${url}/carrinhos` ,   //variavel\r",
									"    method: 'GET',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json' , \r",
									"        'Authorization' : `Bearer ${token}`\r",
									"    }   \r",
									"}\r",
									"    \r",
									"\r",
									"   const quantidade = pm.environment.get(\"quantidadeCar\");\r",
									"\r",
									"pm.sendRequest(buscarCar,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"  pm.environment.set(\"quantidadeCar\", response.json().quantidade);\r",
									" \r",
									"  if (quantidade === 1 ){\r",
									"      console.log('OK')\r",
									"  } else {\r",
									"      console.warn('FAIL')\r",
									"  }\r",
									"  \r",
									"})})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carrinhos/cancelar-compra",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fluxo de  cancelamento de compra",
			"item": [
				{
					"name": "cadastrar usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Excluindo o usuario criado\r",
									"\r",
									"pm.test(\"Excluir usuario\", function (){\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set('id', response._id);\r",
									"})\r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"\r",
									"const  delUser = {\r",
									"    url: `${url}/usuarios/${id}` ,   //variavel\r",
									"    method: 'DELETE',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    }            \r",
									" }\r",
									"\r",
									"pm.sendRequest(delUser,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"  \r",
									"  \r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "fazer login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , 'authorization']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"fulano@qa.com\",\r\n   \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "listar produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['quantidade' , 'produtos']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/produtos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message' , '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"const idC = pm.environment.get(\"idC\");\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Envia id para variável de ambiente.\", function (){\r",
									"const response = pm.response.json();\r",
									"pm.environment.set('idC', response._id);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"fulano@qa.com\",\r",
									"            \"password\": \"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carrinhos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "deletar carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/login` ,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"fulano@qa.com\",\r",
									"            \"password\": \"teste\" \r",
									"            })\r",
									"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"token\", response.json().authorization.slice(7))\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});\r",
									"\r",
									"//busca o produto criado\r",
									"\r",
									"const token = pm.environment.get(\"token\");\r",
									"\r",
									"const  getCar = {\r",
									"    url: `${url}/carrinhos` ,   //variavel\r",
									"    method: 'GET',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json',\r",
									"        'authorization' : `Bearer ${token}`\r",
									"    }\r",
									" }\r",
									"\r",
									"pm.sendRequest(getCar,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"\r",
									"///////////////////////////\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									" pm.test(\"carrinho excluido\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"    \r",
									"    }) \r",
									"   \r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"//validacao de atributos (presenca)\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test (`Resposta contem atributo \"${atributo}\"` , () => {\r",
									"        pm.expect (pm.response.json() [atributo]).to.exist\r",
									"    })\r",
									"});\r",
									"\r",
									"//  Validacao de header\r",
									"\r",
									"pm.test(\"Content-Type is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin is present is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id is present\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive is present\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									"let url = pm.environment.get('baseURL');\r",
									"\r",
									"let idC = pm.environment.get('idC');\r",
									"\r",
									"const  getUser = {\r",
									"    url: `${url}/carrinhos/${idC}` ,   //variavel\r",
									"    method: 'GET',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    }\r",
									" };\r",
									"\r",
									" pm.sendRequest(getUser,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carrinhos/concluir-compra",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}